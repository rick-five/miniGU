name: CI
on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  RUSTFLAGS: -Dwarnings
  RUST_BACKTRACE: 1
  CI: true
  DEFAULT_FEATURES: "std,serde,miette"

defaults:
  run:
    shell: bash

jobs:
  typos:
    name: Spell Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v4
    - uses: crate-ci/typos@v1.29.4

  toml:
    name: TOML Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v4
    - uses: actions-rust-lang/setup-rust-toolchain@v1
    - uses: taiki-e/install-action@v2
      with:
        tool: taplo-cli@0.9.3
    - run: taplo fmt --check --diff

  fmt:
    name: Format Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v4
    - uses: actions-rust-lang/setup-rust-toolchain@v1
    - run: cargo fmt --check

  clippy:
    name: Clippy Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v4
    - uses: actions-rust-lang/setup-rust-toolchain@v1
    - run: cargo clippy --tests --features ${{ env.DEFAULT_FEATURES }} --no-deps

  machete:
    name: Machete Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v4
    - uses: actions-rust-lang/setup-rust-toolchain@v1
    - uses: bnjbvr/cargo-machete@main

  deny:
    name: Deny Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v4
    - uses: EmbarkStudios/cargo-deny-action@v2

  build:
    needs: [typos, toml, fmt, clippy, machete, deny]
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    steps:
    - uses: actions/checkout@v4
    - uses: actions-rust-lang/setup-rust-toolchain@v1
    - uses: Swatinem/rust-cache@v2
    - run: cargo build --features ${{ env.DEFAULT_FEATURES }}

  build_no_std:
    needs: [typos, toml, fmt, clippy, machete, deny]
    name: Build gql-parser in no_std mode
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
    - uses: actions/checkout@v4
    - uses: actions-rust-lang/setup-rust-toolchain@v1
    - run: rustup target add aarch64-unknown-none
    - uses: Swatinem/rust-cache@v2
    - run: cargo build -p gql-parser --target aarch64-unknown-none --no-default-features

  test:
    needs: [typos, toml, fmt, clippy, machete, deny]
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    steps:
    - uses: actions/checkout@v4
    - uses: actions-rust-lang/setup-rust-toolchain@v1
    - uses: taiki-e/install-action@v2
      with:
        tool: cargo-nextest@0.9.88
    - uses: Swatinem/rust-cache@v2
    - run: cargo nextest run --features ${{ env.DEFAULT_FEATURES }}
    - run: cargo test --features ${{ env.DEFAULT_FEATURES }} --doc

  python-test:
    needs: [typos, toml, fmt, clippy, machete, deny]
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    name: Python API Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    steps:
    - uses: actions/checkout@v4
    - uses: actions-rust-lang/setup-rust-toolchain@v1
    - uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    - uses: Swatinem/rust-cache@v2
    - name: Set up completely isolated virtual environment
      run: |
        cd minigu/python
        # Remove any existing virtual environment to ensure complete isolation
        if [ -d ".venv" ]; then
          echo "Removing existing virtual environment for complete isolation..."
          rm -rf .venv || true
        fi
        # Create fresh virtual environment
        echo "Setting up completely isolated virtual environment..."
        python -m venv .venv
        if [ "$RUNNER_OS" == "Windows" ]; then
          source .venv/Scripts/activate
        else
          source .venv/bin/activate
        fi
        # Verify we're using the venv Python
        echo "Virtual environment Python path:"
        which python
        python -m pip install --upgrade pip
        pip install maturin pytest
    - name: Check architecture consistency
      run: |
        cd minigu/python
        if [ "$RUNNER_OS" == "Windows" ]; then
          source .venv/Scripts/activate
        else
          source .venv/bin/activate
        fi
        echo "Runner Architecture:"
        uname -m 2>/dev/null || echo "unknown"
        echo "Python Interpreter Arch:"
        python -c "import platform; print(platform.machine())"
        echo "Python executable path:"
        which python 2>/dev/null || where python
        echo "Python version:"
        python --version
    - name: Build Python extension in isolated environment
      run: |
        cd minigu/python
        if [ "$RUNNER_OS" == "Windows" ]; then
          source .venv/Scripts/activate
        else
          source .venv/bin/activate
        fi
        echo "Building Python extension with maturin in isolated environment..."
        python -m maturin develop --release
    - name: Run minimal import test in isolated environment
      run: |
        cd minigu/python
        if [ "$RUNNER_OS" == "Windows" ]; then
          source .venv/Scripts/activate
        else
          source .venv/bin/activate
        fi
        echo "Running minimal import and instantiation test in isolated environment..."
        
        # Create minimal Python script using echo to avoid YAML parsing issues
        echo 'import sys' > minimal_test.py
        echo 'print("Python executable:", sys.executable)' >> minimal_test.py
        echo 'print("Python path:", sys.path)' >> minimal_test.py
        echo '' >> minimal_test.py
        echo 'try:' >> minimal_test.py
        echo '    import minigu_python' >> minimal_test.py
        echo '    print("SUCCESS: minigu_python imported successfully.")' >> minimal_test.py
        echo '    db = minigu_python.PyMiniGU()' >> minimal_test.py
        echo '    print("SUCCESS: PyMiniGU instantiated.")' >> minimal_test.py
        echo 'except Exception as e:' >> minimal_test.py
        echo '    print("FAILURE: Import or Instantiation failed with error: {e}".format(e=e))' >> minimal_test.py
        echo '    sys.exit(1)' >> minimal_test.py
        echo 'except ImportError as e:' >> minimal_test.py
        echo '    print("FAILURE: ImportError: {e}".format(e=e))' >> minimal_test.py
        echo '    sys.exit(1)' >> minimal_test.py
        
        # Run with VENV Python to ensure complete isolation
        python minimal_test.py
    - name: Run Python tests in isolated environment
      run: |
        cd minigu/python
        if [ "$RUNNER_OS" == "Windows" ]; then
          source .venv/Scripts/activate
        else
          source .venv/bin/activate
        fi
        echo "Running Python API tests in isolated environment..."
        python -m pytest test_minigu_api.py -v

  docs:
    name: Build Docs
    needs: [typos, toml, fmt, clippy, machete, deny]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
    - uses: actions/checkout@v4
    - uses: actions-rust-lang/setup-rust-toolchain@v1
    - run: cargo doc --lib --no-deps --features ${{ env.DEFAULT_FEATURES }}