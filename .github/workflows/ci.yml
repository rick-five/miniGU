name: CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  RUSTFLAGS: -Dwarnings
  RUST_BACKTRACE: 1
  CI: true
  DEFAULT_FEATURES: "std,serde,miette"

defaults:
  run:
    shell: bash

jobs:
  typos:
    name: Spell Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v4
    - uses: crate-ci/typos@v1.29.4

  toml:
    name: TOML Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v4
    - uses: actions-rust-lang/setup-rust-toolchain@v1
    - uses: taiki-e/install-action@v2
      with:
        tool: taplo-cli@0.9.3
    - run: taplo fmt --check --diff

  fmt:
    name: Format Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v4
    - uses: actions-rust-lang/setup-rust-toolchain@v1
    - run: cargo fmt --check

  clippy:
    name: Clippy Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v4
    - uses: actions-rust-lang/setup-rust-toolchain@v1
    - run: cargo clippy --tests --features ${{ env.DEFAULT_FEATURES }} --no-deps

  machete:
    name: Machete Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v4
    - uses: actions-rust-lang/setup-rust-toolchain@v1
    - uses: bnjbvr/cargo-machete@main

  deny:
    name: Deny Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v4
    - uses: EmbarkStudios/cargo-deny-action@v2

  build:
    needs: [ typos, toml, fmt, clippy, machete, deny ]
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    steps:
    - uses: actions/checkout@v4
    - uses: actions-rust-lang/setup-rust-toolchain@v1
    - uses: Swatinem/rust-cache@v2
    - run: cargo build --features ${{ env.DEFAULT_FEATURES }}

  build_no_std:
    needs: [ typos, toml, fmt, clippy, machete, deny ]
    name: Build gql-parser in no_std mode
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
    - uses: actions/checkout@v4
    - uses: actions-rust-lang/setup-rust-toolchain@v1
    - run: rustup target add aarch64-unknown-none
    - uses: Swatinem/rust-cache@v2
    - run: cargo build -p gql-parser --target aarch64-unknown-none --no-default-features

  test:
    needs: [ typos, toml, fmt, clippy, machete, deny ]
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    steps:
    - uses: actions/checkout@v4
    - uses: actions-rust-lang/setup-rust-toolchain@v1
    - uses: taiki-e/install-action@v2
      with:
        tool: cargo-nextest@0.9.88
    - uses: Swatinem/rust-cache@v2
    - run: cargo nextest run --features ${{ env.DEFAULT_FEATURES }}
    - run: cargo test --features ${{ env.DEFAULT_FEATURES }} --doc

  python-test:
    needs: [ typos, toml, fmt, clippy, machete, deny ]
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
    name: Python API Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    steps:
    - uses: actions/checkout@v4
    - uses: actions-rust-lang/setup-rust-toolchain@v1
    - uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    - uses: Swatinem/rust-cache@v2
    - name: Set up virtual environment and install maturin
      run: |
        cd minigu/python
        python -m venv .venv
        if [ "$RUNNER_OS" == "Windows" ]; then
          source .venv/Scripts/activate
        else
          source .venv/bin/activate
        fi
        python -m pip install --upgrade pip
        pip install maturin
    - name: Build Python extension
      run: |
        cd minigu/python
        if [ "$RUNNER_OS" == "Windows" ]; then
          source .venv/Scripts/activate
        else
          source .venv/bin/activate
        fi
        echo "Building Python extension..."
        # Build the core module first to ensure all dependencies are available
        cargo build
        # Then build the Python extension
        maturin develop
    - name: Run Python tests
      run: |
        cd minigu/python
        if [ "$RUNNER_OS" == "Windows" ]; then
          source .venv/Scripts/activate
        else
          source .venv/bin/activate
        fi
        echo "Running Python API tests..."
        python -c "import sys; print('Python version:', sys.version)"
        python -c "import platform; print('Platform:', platform.platform())"
        python -c "import minigu; print('MiniGU module loaded successfully')"
        python -c "from minigu import MiniGU; print('MiniGU class imported successfully')"
        python -c "from minigu import AsyncMiniGU; print('AsyncMiniGU class imported successfully')"
        python -c "db = minigu.connect(); print('Connected to database successfully')"
        if ! python test_minigu_api.py; then
          echo "Python tests failed"
          exit 1
        fi

  docs:
    name: Build Docs
    needs: [ typos, toml, fmt, clippy, machete, deny ]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
    - uses: actions/checkout@v4
    - uses: actions-rust-lang/setup-rust-toolchain@v1
    - run: cargo doc --lib --no-deps --features ${{ env.DEFAULT_FEATURES }}